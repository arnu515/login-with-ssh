package components

import (
    "strings"
    "strconv"
)

script checkAuth(authId string) {
    let interval
    async function auth() {
        try {
            const res = await fetch("/auth/"+authId, { credentials: "same-origin" })
            if (!res.ok) {
                throw new Error("Failed to authorize")
            } else {
                console.info("Authorized!")
                if (interval) clearInterval(interval)
                document.getElementById("runp").style.display = "none"
                document.getElementById("sshcmd").style.display = "none"
                document.getElementById("wfa").innerText = "Authorized! Redirecting..."
            }
        } catch(e) {
            console.error(e)
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        interval = setInterval(auth, 1000)
    })
    document.addEventListener("beforeunload", () => {
        if (interval) clearInterval(interval)
    })
}

func getHost(s string) string {
    return strings.SplitN(s, ":", 2)[0]
}
func getPort(s string) int {
    portStr := strings.SplitN(s, ":", 2)[1]
    port, err := strconv.Atoi(portStr)
    if err != nil || port > 65535 {
        return 22
    }
    return port
}

func getAfterAt(domain string) string {
    host := getHost(domain)
    port := getPort(domain)
    if port == 22 {
        return host
    }
    return host + " -p " + strconv.Itoa(port)
}

templ SSH(authId, sshHost *string) {
	<div class="container" style="text-align: center; margin: 2rem auto">
		<h3>Authorize via SSH</h3>
		<p id="runp">Run the following SSH command to log in to your account:</p>
		<input
			readonly
			id="sshcmd"
			onclick="this.select()"
			value={ "ssh -i path/to/your/keyfile " + *authId + "@" + getAfterAt(*sshHost)}
		/>
		<p style="margin-top: 2rem; font-size: 0.85rem" id="wfa">Waiting for authorization...</p>
	</div>
	@checkAuth(*authId)
}
